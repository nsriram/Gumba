{"radar_data":[{"tip":"Health check pages","name":"Health check pages","pc":{"r":60,"t":110},"movement":"c","description":"We have found adding simple health check pages to applications is incredibly useful. This allows people to quickly understand the health of an individual node. We often extend them to add metrics like the number of orders placed, error rates, or similar information. Using simple embedded web servers, even non-web based services can easily expose internal information over HTTP. By using microformats, these web pages can easily be scraped by other monitoring tools to become part of holistic monitoring."},
               {"tip":"Windows infrastructure automation","name":"Windows infrastructure automation","pc":{"r":120,"t":109},"movement":"c","description":"Mature tools such as PowerShell, together with newer options such as Chef and Puppet, lead us to highlight Windows infrastructure automation on this edition of the Technology Radar. Manual configuration using a mouse and menu options is slow and leads to misconfiguration and “snowflake” machines in an unknown state. We recommend command-line tools for their clarity and scriptability."},
               {"tip":"Guerrilla user testing","name":"Guerrilla user testing","pc":{"r":125,"t":125},"movement":"t","description":"Bringing users in to a controlled environment for formal testing can be a slow and expensive proposition. Much useful, qualitative feedback can be gathered quickly and cheaply through guerrilla user testing - by going out into the world and testing with small samples of the general public. Another alternative is remote usability testing, where you can send out everything from wireframes to final applications for testing by people all over the world. Usabilla, Loop11 and Treejack all provide tools where you can ask users to carry out specific tasks, and capture everything from the time taken to complete a task, to the user’s thoughts and feelings while doing so."},
               {"tip":"Work-In-Progress limits","name":"Work-In-Progress limits","pc":{"r":75,"t":125},"movement":"t","description":"It might sound odd for us to mention this, given how mainstream Agile development has become, but we are noticing teams rediscover and embrace work-in-progress limits. Methods such as Kanban limit the amount of in-flight work, forcing better workflow into the team and more visibility into bottlenecks."},
               {"tip":"Automated deployment pipeline","name":"Automated deployment pipeline","pc":{"r":50,"t":140},"movement":"t","description":"The adoption of Continuous Delivery means many teams are creating an automated deployment pipeline that carries their code all the way to production. Pipelines allow the visualization of otherwise complex chains of build and deployment activities. Further, they provide the ability to reliably trace build artifacts as they progress through each stage on their path to production. Several vendors are now building CI servers that support the pipeline as a first-class feature and not just a visual element. We recommend teams look closely at these products to avoid wasting time trying to shoehorn a pipeline into a tool without adequate support."},
               {"tip":"In process acceptance testing","name":"In process acceptance testing","pc":{"r":107,"t":135},"movement":"t","description":"Acceptance tests generally exercise the system from the 'outside', traversing an entire network stack for the security of exercising the complete application. In-process acceptance testing challenges the notion that test code and application-under-test must run in different processes in order to achieve these benefits. When using an embedded container, it is easy to set up the system, run the tests over HTTP and to verify the final state without the setup costs associated with deploying to and communicating with a separate container."},
               {"tip":"Advanced Analytics","name":"Advanced Analytics","pc":{"r":80,"t":165},"movement":"t","description":"Machine learning, semantic analysis, text mining, quantitative analytics, and other advanced analytics techniques have steadily matured over the past 15 years. They offer incredible potential for prediction, forecasting, identifying repeatable patterns, and providing insight into unstructured data. Historically, our ability to store and rapidly analyze large amounts of audio, video and image data has been severely limited. This placed constraints on sample size, as well as the time it would take to validate analytical models and put them into production. Now, using a spectrum of new technologies like NoSQL, data harvesters, MapReduce frameworks, and clusters of shared-nothing commodity servers, we have the power necessary to make truly effective use of these techniques. Combined with the massive increase in global data available from sensors, mobile devices and social media and we see this as a field with tremendous opportunity."},
               {"tip":"Aggregates as documents","name":"Aggregates as documents","pc":{"r":125,"t":155},"movement":"t","description":"When designing a domain model, the aggregate pattern helps to add structure and modularity. Mapped to a relational database the aggregate is not visible in the table structure. Document databases, like MongoDB, allow you to model aggregates as documents. This 1:1 mapping means that the aggregate root should be the object that is loaded from the collection."},
               {"tip":"Polyglot Persistence","name":"Polyglot Persistence","pc":{"r":160,"t":120},"movement":"t","description":" Polyglot persistence is the technique of storing data in various data stores based on efficiency and how that data is going to be used. Do not just use the default database, often an RDBMS, for all the needs of the application. Instead, ask questions like: Does session management data belong in the database or does it belong in a key-value store? Do relationships between customers and products belong in a graph database? Using NoSQL databases like MongoDB, Riak and Neo4J allows us to reconsider how data is treated, even within a single application."},
               {"tip":"Performance testing as a first-class citizen","name":"Performance testing as a first-class citizen","pc":{"r":160,"t":100},"movement":"c","description":"While unit and acceptance testing are widely embraced as standard development practices, this trend has not continued into the realm of performance testing. Currently, the common tooling drives testers towards creating throw away code and a “click-and-script” mentality. Treating performance testing as a first class citizen enables the creation of better tests that cover more functionality, leading to better tooling to create and run performance tests, resulting in a test suite that is maintainable and can itself be tested."},
               {"tip":"Out-of-container functional testing","name":"Out-of-container functional testing","pc":{"r":200,"t":140},"movement":"c","description":"With the popularity of embedded HTTP servers increasing, so has the technique of out-of-container functional testing. That is writing tests at the boundary of the system, using a mock container to provide both fast feedback and high coverage. Servers such as Jetty and tools like Plasma for the .Net platform can provide a significant reduction in the time it takes to run your test suite."},
               {"tip":"Micro-services","name":"Micro-services","pc":{"r":225,"t":177},"movement":"t","description":"We are seeing an uptick in adoption of micro-services as a technique for distributed system design, both in ThoughtWorks and in the wider community. Frameworks such as Dropwizard and practices like declarative provisioning point to a maturing of the technologies and tools. Avoiding the usual monolithic approach and being sympathetic to the need to replace parts of systems individually has important positive implications for the total cost of ownership of systems. We see this as having greatest impact in the mid-to-long term, specifically with respect to the two-to-five year rewrite cycle."},
               {"tip":"Infrastructure automation of development workstations","name":"Infrastructure automation of development workstations","pc":{"r":180,"t":110},"movement":"c","description":"Automation is one of the core practices of Continuous Delivery. While companies are getting better at automating the management of infrastructure and environments, one commonly forgotten aspect is infrastructure automation of development workstations. This leads to huge gains in productivity by avoiding manually building specific environments and allows a seamless pairing environment. As with other parts of the environment, tools like Puppet and Chef can be used though they are not entirely necessary as the judicious use of platform packaging and language build tools can be sufficient."},
               {"tip":"Agile analytics","name":"Agile analytics","pc":{"r":170,"t":135},"movement":"c","description":"Applying agile methods to data warehousing, business intelligence and agile analytics provides better return and improved business responsiveness. This is done by applying lightweight technologies like REST services to move data around in near real-time instead of batch updates. This allows information about customer behavior and application usage to be derived and responses incorporated within the applications for better user experience and data visualization."},
               {"tip":"Logs as data","name":"Logs as data","pc":{"r":230,"t":121},"movement":"t","description":"Log files generated by web servers, databases, networking infrastructure, and back-end systems are a valuable source of operational and behavioral data for a business. In the past, these files were mostly viewed as a source of diagnostic information in the case of failure, but with lowered cost of storage, and availability of tools such as Splunk for indexing and retrieving millions of events, they can also be a source of customer insights. Treating logs as data and storing complete logs instead of just collecting predefined metrics provides a means to answer novel questions that a business could not have previously anticipated."},
               {"tip":"Responsive web design","name":"Responsive web design","pc":{"r":250,"t":100},"movement":"t","description":"We are rapidly heading towards a world where the majority of consumer interactions are from mobile devices. Mobile first embraces this trend by designing user interfaces and server interactions that target mobile devices in the first instance. The mobile first strategy contrasts with approaches that assume a highly capable client device connected to a fast and reliable network and then degrade the experience to fit the limitations of the device. One such technique for achieving this is responsive web design. Starting with a basic presentation of content - and typically keeping the essential information constant - the experience is enhanced to suit the features detected on more capable browsers. This commonly takes the form of layout and format changes based on screen size."},
               {"tip":"Mobile first","name":"Mobile first","pc":{"r":240,"t":130},"movement":"t","description":"We are rapidly heading towards a world where the majority of consumer interactions are from mobile devices. Mobile first embraces this trend by designing user interfaces and server interactions that target mobile devices in the first instance. The mobile first strategy contrasts with approaches that assume a highly capable client device connected to a fast and reliable network and then degrade the experience to fit the limitations of the device."},
               {"tip":"Declarative provisioning","name":"Declarative provisioning","pc":{"r":175,"t":150},"movement":"t","description":"Tools such as Pallet offer a compelling approach to environment creation and management through declarative provisioning. Usually, this is accomplished by declaring your environment topology - a number of instances, OS, network configuration and applications - using a DSL, and then creating the entire environment automatically via a command-line tool. This approach differs in the decoupling of instance creation and application provision, and in the addition of the ability to declare dependencies between domain-specific application-level services over multiple boxes."},
               {"tip":"Remote usability testing","name":"Remote usability testing","pc":{"r":250,"t":147},"movement":"t","description":"Bringing users in to a controlled environment for formal testing can be a slow and expensive proposition. Much useful, qualitative feedback can be gathered quickly and cheaply through guerrilla user testing - by going out into the world and testing with small samples of the general public. Another alternative is remote usability testing, where you can send out everything from wireframes to final applications for testing by people all over the world. Usabilla, Loop11 and Treejack all provide tools where you can ask users to carry out specific tasks, and capture everything from the time taken to complete a task, to the user’s thoughts and feelings while doing so."},
               {"tip":"Semantic monitoring","name":"Semantic monitoring","pc":{"r":230,"t":156},"movement":"t","description":"Development teams typically produce tests that specify and validate application behavior, but stop running them once the application goes into production. This is a missed opportunity. Semantic monitoring uses your tests to continuously evaluate your application, combining test-execution and real-time monitoring. With micro-services, and similar fine-grained architectural approaches, it is increasingly important to test their interaction at run-time. Incorporating the validation of consumer-driven contracts into a monitoring facility is one way to approach this. While still evolving, we see great promise in the merging of two separate but important verification schemes."},
               {"tip":"Edge Side Includes for page composition","name":"Edge Side Includes for page composition","pc":{"r":250,"t":163},"movement":"t","description":"Breaking up monolithic applications and building systems from micro-services requires a solid strategy to integrate output from disparate systems into a coherent experience for the end-user. Integrating at the presentation layer using Edge Side Includes (ESI) for page composition is a practical and elegant solution. This can occur within your environment using a reverse proxy like Varnish or closer to the user in a Content Delivery Network (CDN)."},
               {"tip":"Configuration in DNS","name":"Configuration in DNS","pc":{"r":200,"t":165},"movement":"t","description":"Application deployments often suffer from an excess of environment-specific configuration settings, including the hostnames of dependent services. Configuration in DNS is a valuable technique to reduce this complexity by using standard hostnames like ‘mail’ or ‘db’ and have DNS resolve to the correct host for that environment. This can be achieved in multiple ways, including split-horizon DNS or configuring search subdomains. Collaboration between development teams and IT operations is essential to achieve this, but that is unfortunately still difficult in some organizations."},
               {"tip":"Deployment and scripting test tools","name":"Deployment and scripting test tools","pc":{"r":300,"t":135},"movement":"t","description":"With deployment automation tools maturing, including PowerShell on Windows, scripts are increasingly sophisticated and contain a lot of logic. We recommend deployment and scripting test tools, such as Pester for PowerShell and TOFT for Chef and Puppet. It is critical to have good test coverage around the most important aspects of your deployment automation."},
               {"tip":"Database based integration","name":"Database based integration","pc":{"r":375,"t":120},"movement":"c","description":"For those organizations that are required to integrate systems, many continue to use a common database, sharing data between applications through the database tier. In many cases this has become an established and accepted architectural pattern: database based integration. The side effect of such an approach is greater coupling of database schemas, release schedules, performance and quality of service across applications"},
               {"tip":"Feature branching","name":"Feature branching","pc":{"r":375,"t":150},"movement":"c","description":"Disappointingly, we continue to see development teams embrace the practice of feature branching to isolate work and defer integration. Feature branches commonly cause significant pain and unpredictability during late merges, but more importantly prevent the continual design improvement necessary to maintain high quality software. We recommend continuous integration and branch by abstraction as an alternative to feature branching."},
               {"tip":"Test recorders","name":"Test recorders","pc":{"r":375,"t":127},"movement":"c","description":"Test recorders seem invaluable as they provide a quick way to capture navigation through an application. However, we strongly advise against their regular use, as it tends to result in brittle tests which break with small changes to the UI. The test code they produce tends to be relatively poor and riddled with unnecessary duplication. Most importantly, test recorders tend to cut channels of communication between the test automation and development teams. When faced with an application that is difficult to test through the user interface, the solution is to have a critical conversation between the teams to build a more testable UI."},
               {"tip":"Exhaustive browser-based testing","name":"Exhaustive browser-based testing","pc":{"r":375,"t":100},"movement":"t","description":"We have previously spoken about executing automated tests at the appropriate layer of your application. In this radar, we want to be very specific - we recommend against exhaustive browser based testing. Web browser automation tools like Selenium have encouraged widespread automated testing through the browser. While these tests continue to have their place in a test portfolio, most teams find that executing the bulk of tests through the browser creates a slow and fragile test suite."},
               {"tip":"Infrastructure as code","name":"Infrastructure as code","pc":{"r":95,"t":45},"movement":"c","description":"We continue to highlight infrastructure as code. This technique treats infrastructure configuration in the same way as code; checking configuration into source control, then carefully pushing changes out to the data center."},
               {"tip":"Embedded servlet containers","name":"Embedded servlet containers","pc":{"r":90,"t":65},"movement":"t","description":"We have talked much already about embedded servlet containers - and these are now widely adopted on our projects. Tools such as SimpleWeb and Webbit take the simple, embedded approach further and offer raw HTTP server functionality without implementing the Java Servlet specification. We are pleased to see a corresponding reduction in the complexity of test code that takes advantage of this."},
               {"tip":"Silverback","name":"Silverback","pc":{"r":125,"t":80},"movement":"t","description":"There are a couple of usability testing tools that match our preferred ‘guerrilla’ approach. Eye-tracking has long been a useful technique when designing compelling user interfaces, however the equipment and software associated with it is expensive and typically requires the use of specialist firms. Crazy Egg is a cheaper, software-only solution that produces heat maps based on mouse movement. This movement has a strong correlation with gaze, and can be used as a reasonable approximation. Silverback captures not only the screen during a test, but also records the face and voice of the user. This can be invaluable in sharing rich test experiences with the wider development team."},
               {"tip":"AppCode","name":"AppCode","pc":{"r":135,"t":25},"movement":"t","description":"Apple’s mobile devices are going strong and native apps are a cornerstone of their success. Writing these native apps has become much more pleasant and productive since JetBrains launched AppCode, an IDE for iOS and OS X development that replicates the strengths of their IDEs for other platforms."},
               {"tip":"Jasmine paired with Node.js","name":"Jasmine paired with Node.js","pc":{"r":60,"t":20},"movement":"t","description":"We have long thought of JavaScript as a first class language, and have been keenly following the development of testing tools in that space. The cream of the crop for out-of-browser testing is currently Jasmine. Jasmine paired with Node.js is the go-to choice for robust testing of both client- and server-side JavaScript."},
               {"tip":"Immutable servers","name":"Immutable servers","pc":{"r":115,"t":45},"movement":"t","description":"Precedents set by cloud providers are now changing expectations within the corporate datacenter. In the cloud, many systems scale automatically, either to provide additional availability or in response to increased demand. Crucial to managing a growing estate, immutable servers, or ‘phoenix servers’, are a sensible approach for enterprises looking at IaaS and PaaS. In contrast, custom-configured ‘snowflake servers’ increase the load on the operations group and encourage a “works on my machine” mentality. Being able to re-provision machines - hard or virtual - from scratch using tools such as Chef or Puppet can drastically reduce the complexity of managing large server farms. Coupled with software that is designed to withstand failure, this will lead to more scalable and reliable systems."},
               {"tip":"Graphite","name":"Graphite","pc":{"r":50,"t":45},"movement":"t","description":"While many tools exist for displaying graphs for system monitoring purposes, Graphite has emerged recently as the clear leader in this space. Capable of charting metrics in real-time, it features a round-robin database that is able to store long periods of historic data, while still providing more recent information at a higher fidelity. Numerous configuration options exist on the dashboard, and the resulting graphs can then be embedded in webpages to increase visibility."},
               {"tip":"Vagrant","name":"Vagrant","pc":{"r":165,"t":60},"movement":"t","description":"The tool Vagrant makes it simple for teams to distribute virtualized development environments constructed using version-control friendly descriptors. Vagrant helps eliminate environmental differences in development and reduce troubleshooting waste."},
               {"tip":"Gradle","name":"Gradle","pc":{"r":170,"t":80},"movement":"t","description":"Two things have caused fatigue with XML-based build tools like Ant and Maven: too many angry pointy braces and the coarseness of plug-in architectures. While syntax issues can be dealt with through generation, plug-in architectures severely limit the ability for build tools to grow gracefully as projects become more complex. We have come to feel that plug-ins are the wrong level of abstraction, and prefer language-based tools like Gradle and Rake instead, because they offer finer-grained abstractions and more flexibility long term."},
               {"tip":"PSake","name":"PSake","pc":{"r":235,"t":40},"movement":"c","description":"PSake (pronounced ‘sake’ like the Japanese rice wine) is a build automation tool implemented in PowerShell. PSake provides a tidy syntax for declaring build tasks and dependencies without programming in XML. You also have access to all the features of PowerShell and the .Net framework from within your build scripts."},
               {"tip":"Frank","name":"Frank","pc":{"r":245,"t":10},"movement":"c","description":"Frank is an open source library that allows functional tests for iPhones and iPads to be written in Cucumber and executed on a remote device. This fills an important niche in iOS development where acceptance-test driven development was previously cumbersome and awkward."},
               {"tip":"JavaScript micro frameworks","name":"JavaScript micro frameworks","pc":{"r":255,"t":75},"movement":"c","description":"With mobile applications on the rise, JavaScript size and performance is even more critical. JavaScript micro frameworks have emerged as a direct response to ‘bloat’ in some of the larger libraries. These small libraries do exactly one thing, such as DOM selection or MVC, and can be under one kilobyte in size. By combining a number of micro frameworks, developers can get exactly the functionality they need without the overhead of a larger library. Microjs.com hosts a collection of these micro frameworks, as well as a tool that can bundle them into a single library."},
               {"tip":"Jade","name":"Jade","pc":{"r":260,"t":34},"movement":"c","description":"The simplicity-through-beauty approach to HTML that HAML takes has caught our attention in previous Radars. We are excited to see Jade bringing the same benefits to a number of languages - and in particular have found Java and Scala support useful."},
               {"tip":"NuGet","name":"NuGet","pc":{"r":265,"t":27},"movement":"c","description":"Package management systems are a widely accepted practice for incorporating third party libraries. Tools such as RubyGems, Maven and APT are available at both language and system level. NuGet is such a system for .Net. It consists of a Visual Studio IDE extension and a PowerShell module that opens the possibility for further improving build automation on the .Net platform."},
               {"tip":"Highcharts","name":"Highcharts","pc":{"r":250,"t":55},"movement":"t","description":"Increasingly performant JavaScript engines, combined with widespread support for embedded SVG documents in HTML, has lead to pure JavaScript-based client-side graphing and visualization solutions gaining a lot of traction. Highcharts is one of the best ones we have come across, with out-of-the-box support for multiple highly-configurable interactive chart types, and the ability to easily render large data sets."},
               {"tip":"D3","name":"D3","pc":{"r":210,"t":60},"movement":"t","description":"D3 is a JavaScript library for binding datasets into the DOM, and then declaratively transforming the document to create rich visualizations - ranging from graphs to heatmaps. With support for HTML, CSS and SVG, and an extensible plug-in model, we like the fact that this library allows us to deliver information in more intuitive ways."},
               {"tip":"Apache Pig","name":"Apache Pig","pc":{"r":225,"t":80},"movement":"t","description":"Hadoop continues to be the most popular framework to develop distributed data-processing applications. Although programming Hadoop applications in Java is not particularly difficult, designing efficient MapReduce pipelines does require a good amount of experience. Apache Pig simplifies Hadoop development by offering a high level language, called Pig Latin, and an execution runtime. Pig Latin is procedural and provides a SQL-like interface to work with large datasets. The execution infrastructure compiles Pig Latin into an optimized sequence of MapReduce programs that run on the cluster. Pig Latin is extensible through user-defined functions in different languages such as Ruby, JavaScript, Python and Java."},
               {"tip":"SaaS performance testing tools","name":"SaaS performance testing tools","pc":{"r":200,"t":45},"movement":"t","description":"Rather than wrestling with licenses and setting up clusters of machines for performance testing, we’re seeing a rise in SaaS performance testing tools such as Blitz.io and Tealeaf. These services make it easy to run performance tests with a huge number of geographically diverse clients, without investing heavily in infrastructure."},
               {"tip":"Dependency Structure Matrices","name":"Dependency Structure Matrices","pc":{"r":190,"t":35},"movement":"t","description":"We strongly favor code-base visualization techniques. In particular, Dependency Structure Matrices (DSM) have proven to be extremely useful, especially in support of an evolutionary architecture and emergent design. Tools support for DSM is widespread."},
               {"tip":"Locust","name":"Locust","pc":{"r":220,"t":25},"movement":"t","description":"We are strong believers in in-line automated performance testing, although open source tools in this space have been somewhat limited to date. Locust is a firm favorite that provides the ability to write tests in Python, with good support for running multiple injectors, basic statistics generation, and a useful web dashboard. Its approach to web load testing focuses more on the simulation of users than just generating hits per second. We would typically recommend Locust over and above older tools such as JMeter or Grinder."},
               {"tip":"Rake for Java and .Net","name":"Rake for Java and .Net","pc":{"r":225,"t":15},"movement":"t","description":"Of all the build tools and languages we use across our projects, the one we keep coming back to is Rake. Rake is a beautiful, simple and powerful build language implemented as an internal Domain-Specific Language on Ruby. Ruby's ability to run across several virtual-machine platforms means that Rake is equally available - while leaving open the option to utilize more language-specific tools for some tasks. Finding a similar combination of elegance and flexibility is difficult regardless of your platform, so we recommend trying Rake for Java and .Net projects."},
               {"tip":"Logic-free markup","name":"Logic-free markup","pc":{"r":310,"t":55},"movement":"c","description":"While MVC has been a staple of web development for the past few years, most libraries and frameworks fail to adhere to one of its most important principles: keeping logic out of the view layer. The consequences of not having logic-free markup include complex dependencies, difficulty testing and inability to reuse code. Recent DSLs like Mustache, are available for many languages and platforms and have started to turn the trend. They allow editing in any tool, without extra requirements for language support and provide huge gains for UI development and overall application design."},
               {"tip":"Crazy Egg","name":"Crazy Egg","pc":{"r":300,"t":25},"movement":"t","description":"There are a couple of usability testing tools that match our preferred ‘guerilla’ approach. Eye-tracking has long been a useful technique when designing compelling user interfaces, however the equipment and software associated with it is expensive and typically requires the use of specialist firms. Crazy Egg is a cheaper, software-only solution that produces heat maps based on mouse movement. This movement has a strong correlation with gaze, and can be used as a reasonable approximation. Silverback captures not only the screen during a test, but also records the face and voice of the user. This can be invaluable in sharing rich test experiences with the wider development team."},
               {"tip":"Zipkin","name":"Zipkin","pc":{"r":290,"t":30},"movement":"t","description":"When building distributed applications to address web-scale or big data requirements, setting up appropriate monitoring tools becomes a non-trivial exercise. Zipkin is a tool that instruments the different components of a service-based system and visualizes the breakdown of logical requests passing through multiple services using a ‘firebug-like’ view. The raw data can be stored in Hadoop for more advanced reporting and data mining."},
               {"tip":"Zucchini","name":"Zucchini","pc":{"r":300,"t":65},"movement":"t","description":"Zucchini is a testing framework that provides Cucumber-style BDD testing for iOS apps. It uses CoffeeScript for feature definitions, takes screenshots as tests are run, and we’ve been very happy with it."},
               {"tip":"GemJars","name":"GemJars","pc":{"r":310,"t":85},"movement":"t","description":"In a mixed Ruby/Java application, running on the JVM, there are differences in package format and dependency resolution that need to be dealt with. By providing an Ivy compatible proxy that packages RubyGems as JARs and uses Ivy to resolve Gem dependencies, GemJars consolidates and simplifies the building of truly polyglot codebases."},
               {"tip":"Light Table","name":"Light Table","pc":{"r":290,"t":15},"movement":"t","description":"Like most good software developers, we choose our tools with care. We are especially keen on interesting departures from the norm, which is why we helped back the Light Table Kickstarter project. While still very early in development, the promised interactivity rivals the best of the Smalltalk world, with a modern twist; we are anxious to see what will come of this ambitious project."},
               {"tip":"Riemann","name":"Riemann","pc":{"r":300,"t":45},"movement":"t","description":"Riemann is an open source server that aggregates and relays events in real time. Written in Clojure, and based on Netty, it is capable of handling thousands of concurrent connections per node. Riemann uses a simple Protobuf protocol for events, which allows it to aggregate everything from CPU and memory use to orders placed to error rates. It forwards to systems like Graphite, triggers email alerts, and provides a dashboard for monitoring these metrics. Riemann is an important part of the movement towards handling data as generic streams of events in real-time, as opposed to using specialized systems for different types of data."},
               {"tip":"Enterprise service bus","name":"Enterprise service bus","pc":{"r":375,"t":36},"movement":"c","description":"IT departments are increasingly striving to liberate data from disparate systems. A broad set of approaches have been promoted under the generic term Service Oriented Architecture (SOA). This has led to confusion about what the term and approach actually means. We believe businesses do not need the complex enterprise service bus products advocated by vendors. ESBs actively undermine the reasons for choosing the bus approach: low latency, loose coupling, and transparency. In contrast we have seen considerable success with Simple Message Buses where the integration problems are solved at the end points, rather than inside a vendor ESB system. The most well known Simple Message Bus approach is one based on the principles of REST and leveraging the proven scalability of the web. However organizations that have already invested in ESB infrastructure can leverage the useful parts of that infrastructure (reliable messaging etc) while still using a Simple Message Bus approach and performing integrations at the edges of the system."},
               {"tip":"VCS with implicit workflow","name":"VCS with implicit workflow","pc":{"r":375,"t":54},"movement":"c","description":"Some tools seek to enable and facilitate different ways of working. Unfortunately other tools are created using a different premise, one of low trust in users and the need to enforce a predefined process. ClearCase and TFS do this. This makes version control systems with “implicit workflow” unsuitable tools for modern agile software development. Project methodologies and the best ways of working on a project need to emerge. Tools that enforce high ceremony around things like check in just get in the way and kill productivity."},
               {"tip":"Maven","name":"Maven","pc":{"r":375,"t":29},"movement":"c","description":"Maven has long been a staple of build automation in the Java space. However, given its lack of flexibility and support for automation best practices, especially in the Continuous Delivery domain, the use of alternatives such as Gradle should be considered."},
               {"tip":"Atom","name":"Atom","pc":{"r":30,"t":202},"movement":"c","description":"One of the foundational technologies of the Web as a platform, Atom is an extensible data syndication format with broad tool support in almost all languages. In conjuction with the Atom Publication Protocol, Atom comprises a lightweight platform for publishing and consuming data with high quality-of-service guarantees. Atom-based solutions trade scalability for latency, however, making Atom often inappropriate for very low-latency scenarios."},
               {"tip":"Care about hardware","name":"Care about hardware","pc":{"r":75,"t":250},"movement":"c","description":"One of the principal mechanisms that allows agile software development to work is feedback loops. One common yet expensive broken feedback loop we have observed is the lack of communication between those responsible for hardware and software. The end result creates cost but not worth. You must view architecture holistically; neither hardware nor software has a full enough perspective to be successful alone."},
               {"tip":"Mobile payment systems","name":"Mobile payment systems","pc":{"r":110,"t":200},"movement":"t","description":"Despite apparent resistance in the Global North, mobile payment systems such as Kenya’s M-Pesa are providing secure cashless monetary transactions. With the service rolling out across Africa, the system opens up the market for the millions of people with mobile phones but lacking access to traditional banking outlets. Providers such as Square are slowly improving the situation, but the North continues to lag."},
               {"tip":"Neo4j","name":"Neo4j","pc":{"r":75,"t":225},"movement":"t","description":"Graph databases store information as arbitrarily interconnected nodes linked by named relations, rather than as tables and joins. Schema-less and highly extensible, they are an excellent choice for modelling semi-structured data in complex domains. Neo4j is the front-runner in the space - both its REST API and its Cypher query language support simple and fast storage and traversal of graphs."},
               {"tip":"Node.js","name":"Node.js","pc":{"r":225,"t":185},"movement":"t","description":"For many years JavaScript was predominantly used as a client side Web programming language, but a lightweight language such as JavaScript can easily be embedded in different environments, including the server side. Node.js allows developers to write applications in JavaScript on both client and server sides. Since most servers spend the majority of their time waiting for I/O operations, Node.js’ event driven non-blocking architecture is very efficient. Unlike thread-based solutions, Node.js does not need to wait for I/O operations to complete while processing incoming requests, making it a good choice when implementing high performance services."},
               {"tip":"Riak","name":"Riak","pc":{"r":180,"t":230},"movement":"t","description":"Riak is a distributed key-value store that is schema-less and data-type agnostic, it can be put to good use in write-heavy projects to store data such as sessions, shopping carts and streaming logs - whilst it retains the ability to perform complex queries in a full-text search. The distributed cluster can self-recover without a single master, has tuneable consistency and availability settings and can do collision detection and resolution if needed - all of whuch can be helpful in high availability environments."},
               {"tip":"Domain-specific PaaS","name":"Domain-specific PaaS","pc":{"r":220,"t":258},"movement":"c","description":"We find that many businesses are starting to build their own internal cloud deployment environments that can be easily replicated for development and testing environments. In many cases, provisioning is self-service, and with a single keystroke, developers can create a set of hosts that implement core enterprise assets and collaborating systems. In a sense, this is a domain-specific PaaS offered to internal customers."},
               {"tip":"Linux containers","name":"Linux containers","pc":{"r":212,"t":195},"movement":"c","description":"One style of virtualization that is particularly attractive for SaaS and PaaS implementations is the virtual container. Linux containers such as OpenVZ provide the isolation and management benefits of a virtual machine without the overhead usually associated with general-purpose virtualization. In the container model, the guest OS is limited to being the same as the underlying host OS, but that is not a serious limitation for many cloud applications."},
               {"tip":"Private clouds","name":"Private clouds","pc":{"r":220,"t":240},"movement":"c","description":"Because of concerns over privacy and security, or a need to repurpose existing hardware investments, many businesses are choosing to implement their own private cloud. There are are a variety of products, both open source and commercial for this purpose, but it should be noted that compute, storage, and network management are only the starting points for a useful private cloud. There are many services and processes that must be custom implemented to provide a cloud facility that rivals the public offerings from Amazon, Rackspace, or others."},
               {"tip":"Hybrid clouds","name":"Hybrid clouds","pc":{"r":250,"t":250},"movement":"t","description":"Hybrid clouds combine the best features of public clouds and private data centers. They allow applications to run in a private data center during normal periods, and then use rented space in a public cloud for overflow capacity during peak traffic periods. There are now a number of infrastructure solutions that allow automatic and consistent deployment across a hybrid cloud, such as Palette, and RightScale. With robust offerings from Amazon, Rackspace and others, we are moving hybrid clouds to “Trial” on this edition of the radar."},
               {"tip":"MongoDB","name":"MongoDB","pc":{"r":160,"t":240},"movement":"t","description":"For problems that fit the document databases model, MongoDB provides easy programmability, a query interface, high availability with automated failover, and automated sharding capabilities. It allows for a smooth transition to NoSQL data stores from the RDBMS model, with the inclusion of familiar concepts, such as the ability to define indexes."},
               {"tip":"Continuous integration in the cloud","name":"Continuous integration in the cloud.","pc":{"r":180,"t":215},"movement":"t","description":"Continuous integration in the cloud is one of those obvious-in-hindsight infrastructure offerings that supports agile development. With no local software and minimal configuration, it just works. With mature offerings now in place, serious developers are left with no excuse for avoiding this important practice."},
               {"tip":"Couchbase","name":"Couchbase","pc":{"r":190,"t":250},"movement":"t","description":"Couchbase is a persistent cache with auto-sharding features, master-less clusters and replicated data to avoid cache-misses. Because it supports the Memcached protocol, it allows drop-in replacement for Memcached based systems."},
               {"tip":"Single threaded servers with asynchronous I/O","name":"Single threaded servers with asynchronous I/O","pc":{"r":180,"t":197},"movement":"t","description":"Node.js is just one example of a class of single threaded servers with asynchronous I/O that are seeing increased popularity. A traditional web or application server associates each incoming request with a thread until all the processing tasks associated with that request are complete and the response has been sent back. If any of those tasks involve I/O, the thread blocks while that I/O takes place. This approach can waste finite resources such as file descriptors and memory since each connection occupies a thread whether or not that thread is actually consuming CPU cycles. An alternative architecture is starting to emerge in implementations like Node.js (a Javascript server running on Google V8), Nginx (an open source web server and proxy), and Webbit (a Java application server), that uses a single thread to serve many connections, processing all I/O asynchronously. These servers support orders of magnitude more simultaneous connections because each one consumes far fewer resources."},
               {"tip":"Calatrava","name":"Calatrava","pc":{"r":315,"t":205},"movement":"t","description":"We have previously been skeptical of claims of reusable code working across platforms. Our experience with many tools in the market has been mixed and we advise caution to our clients who are looking at these types of solutions. Taking an approach that carefully navigates these dangerous waters, we feel Calatrava is worth evaluating for mobile application development. The framework neatly follows the separation of business and presentation logic, maximising reuse where there is commonality, and providing native access where speed or device-specific idioms are to be followed."},
               {"tip":"Datomic","name":"Datomic","pc":{"r":330,"t":215},"movement":"t","description":"A fundamental rethinking of how databases work, Datomic is an immutable database server with fascinating transactional and deployment characteristics. One of the common headaches on agile projects is managing database migrations, especially restoring previous states. Datomic makes the need for migrations go away - every version of the data (and schema) is preserved by the database. While still evolving, we appreciate Datomic’s boldness of vision."},
               {"tip":"Vert.x","name":"Vert.x","pc":{"r":320,"t":225},"movement":"t","description":"Representing yet another evolution away from traditional, free-standing application containers, Vert.x is an application framework that bridges synchronous and asynchronous programming styles. This gives the programmer the option to trade off scalability and performance for simplicity. Unlike Node.js, Vert.x is a library that can be called from a variety of languages supported on the JVM, including Java, Ruby and JavaScript."},
               {"tip":"Azure","name":"Azure","pc":{"r":320,"t":235},"movement":"t","description":"Microsoft’s Azure cloud platform continues to play catch-up with more mature clouds such as AWS, but we’ve been impressed with how Microsoft has responded to market demands. As with most Microsoft solutions it continues to be a contender and worth evaluating."},
               {"tip":"Open source IaaS","name":"Open source IaaS","pc":{"r":300,"t":245},"movement":"t","description":"Selecting the right cloud provider from an almost bewildering array of options continues to be difficult. One strategy is to adopt an open source IaaS platform such as OpenStack or CloudStack. This allows you to run a private cloud that is consistent with a public cloud, and to migrate from one cloud provider to another should the need arise. Going one step further, Apache’s Deltacloud abstracts away from specific provider APIs to give a consistent experience across cloud platforms."},
               {"tip":"BigQuery","name":"BigQuery","pc":{"r":300,"t":255},"movement":"t","description":"Google’s BigQuery brings data analytics to the cloud. Rather than loading data into an expensive data-warehouse with predefined indexes, BigQuery allows you to upload and investigate a data set through ad-hoc SQL-like queries. This is a great way to create a cheap proof-of-concept or even a complete application, as processing of hundreds of gigabytes of data by thousands of servers happens in seconds."},
               {"tip":"Windows Phone","name":"Windows Phone","pc":{"r":300,"t":265},"movement":"t","description":"Despite a promising start to Windows Phone, a well thought-out user interface, and probably the best development experience of any mobile platform, we have seen several stumbles in the execution of the platform strategy by Microsoft and its partners. This makes us less optimistic about the future of the platform than we were in the last radar."},
               {"tip":"WS-*","name":"WS-*","pc":{"r":375,"t":190},"movement":"c","description":"We are reiterating our advice that given the progress and acceptance of simpler web-as-platform techniques such as REST and OAuth and the known issues with WS-*, it should only be used cautiously."},
               {"tip":"Java portal servers","name":"Java portal servers","pc":{"r":375,"t":235},"movement":"c","description":"A continuing cause of delivery problems lies in the use of Java Portal Server packages. These problems occur in both open source and commercial portal platforms. The promised productivity of these platforms is hindered by their complex and unwieldy programming models and difficulty in automating deployment, data migration, and tests. Although product demos are compelling, the base features of portal products are often a poor fit for real web applications, while the extra advertised features such as single sign-on or search are usually already served by existing, targeted, enterprise assets."},
               {"tip":"Zero-code packages","name":"Zero-code packages","pc":{"r":375,"t":201},"movement":"c","description":"There are a number of enterprise software packages on the market that purport to offer flexible functionality with zero coding. This is certainly an appealing notion – that a non-technical business user could configure software to the unique requirements of any business without learning a programming language or hiring a professional software developer. However, it should be kept in mind that any change that affects the behavior of software in production, whether it is code, configuration, data, or environments, could cause defects or failures in the business system. Writing code is only one step in a professional software production lifecycle. The need for repeatable analysis, testing, build, and deployment does not go away because the system is modified via a drag-and-drop interface instead of a high-level programming language. When evaluating a zero-code package, ensure that the the product supports these processes and that you have the necessary IT support structures in place to implement them."},
               {"tip":"Singleton infrastructure","name":"Singleton infrastructure","pc":{"r":375,"t":215},"movement":"t","description":"Sometimes, architectural decisions lead you to incorporate infrastructure items that you can only afford one of, such as mainframes or search appliances. This is a terrible idea. It severely restricts testing and deployment flexibility. We strongly favor infrastructure you can easily set up and tear down. Singleton infrastructure belongs to misguided vendor-driven architectures of the past."},
               {"tip":"Meteor.js","name":"Meteor.js","pc":{"r":375,"t":225},"movement":"t","description":"Meteor.js is a client- and server-side JavaScript application framework, run inside a web browser, or in a Node.js container, and backed by MongoDB for persistence. It uses “Smart Packages” - little bundles of code that can run in the browser or as part of a cloud service. It allows hot code deploys and live in-browser updates. We think the idea is great, even if the framework is not yet ready for primetime."},
               {"tip":"Clojure","name":"Clojure","pc":{"r":115,"t":292},"movement":"t","description":"Clojure is a dynamic, functional language that runs on the JVM. Although its roots are in Lisp, one of the oldest computer languages, it also embodies many modern programming concepts, including lazy evaluation and advanced concurrency abstractions. Clojure has spawned a vibrant community of programmers who are contributing a rich set of frameworks and tools. One example of these is Midje, an innovative spin on unit testing and mocking frameworks."},
               {"tip":"Scala","name":"Scala","pc":{"r":100,"t":300},"movement":"t","description":"In a previous radar we had two JVM-based functional programming languages, Clojure and Scala, in our “Assess” category. We had expressed a slight preference for Clojure because it is the smaller and more focused language. Since that radar we have realized that the wider applicability of Scala makes it more approachable for enterprise developers, and we have witnessed great successes in the adoption of Scala. Consequently we have moved Scala into our “Trial” category. Pay careful attention to the idiomatic use of Scala if it is introduced to a new team to avoid “Java without semicolons” or Perl styles. We have now used both languages on a number of projects, and have moved them both into “Adopt”, appropriately."},
               {"tip":"Care about languages","name":"Care about languages","pc":{"r":75,"t":285},"movement":"c","description":"The industry is experiencing something of a renaissance in programming languages. ThoughtWorks thinks it is time to start assessing which other languages will help your organization while taking stock of the useful lifetime remaining for your current choices. You need to care about languages. Traditionally structured organizations with separate support teams may find skills constrain choice, DevOps offers a path forwards here."},
               {"tip":"SAAS, SCSS, LESS, and Stylus","name":"SAAS, SCSS, LESS, and Stylus","pc":{"r":75,"t":340},"movement":"t","description":"CSS has been an extremely popular and effective DSL for styling web pages. It does, however, have some annoying limitations which have led to a number of languages that build on CSS to make it easier to write and modify. We've had good experiences with SASS, SCSS, LESS, and more recently, Stylus."},
               {"tip":"Domain-Specific Languages","name":"Domain-Specific Languages","pc":{"r":170,"t":320},"movement":"c","description":"Domain-Specific Languages is an old technique that we think is significantly under-used. We hope that the publication of Martin Fowler’s book on the topic will encourage more people to utilize them."},
               {"tip":"Scratch, Alice, and Kodu","name":"Scratch, Alice, and Kodu","pc":{"r":255,"t":290},"movement":"t","description":"We think it is essential to inspire the next generation of technologists. Scratch, Alice, and Kodu are programming languages that rely on visual environments and building blocks as teaching devices. They offer exciting possibilities for educational programs and organizations intending to foster programming knowledge in environments beyond academia."},
               {"tip":"Twitter Bootstrap","name":"Twitter Bootstrap","pc":{"r":205,"t":300},"movement":"t","description":"With JavaScript development on the rise, there is a growing need for reusable, extensible UI tooling. Twitter Bootstrap builds on the best offerings in the space, to provide a powerful set of patterns and components that help developers create responsive and adaptive applications with pleasant aesthetics."},
               {"tip":"Sinatra","name":"Sinatra","pc":{"r":150,"t":335},"movement":"t","description":"Micro-frameworks are emerging as a way to handle increasing complexity in applications both on client- and server-side. Sinatra was one of the early precursors of that trend in server-side space, exposing a lightweight DSL to build fast services that can be easily composed. Flask, Scalatra and Compojure are similar offerings for Python, Scala and Clojure respectively."},
               {"tip":"AngularJS and Knockout","name":"AngularJS and Knockout","pc":{"r":230,"t":345},"movement":"t","description":"We are seeing a common pattern of creating single-page web applications. Rather than requiring full page refresh, these request smaller sets of data from the server, and change the displayed content of their page through modifying the DOM. To make this more manageable, JavaScript MV* frameworks have been developed that support data binding, client-side templates, and validation. While lightweight applications may not need a framework, for more complex scenarios, AngularJS and Knockout should be considered as the current front-runners in this field."},
               {"tip":"Require.js","name":"Require.js","pc":{"r":210,"t":280},"movement":"t","description":"As adoption continues to expand, so does the size of many JavaScript codebases. To improve modularity of code and help manage this, we are seeing teams embrace libraries such as Require.js. Using the Asynchronous Module Definition (AMD) format, code is split into modules, easing development and maintenance, and an optimization tool then combines and minifies scripts for production deployment."},
               {"tip":"Dropwizard","name":"Dropwizard","pc":{"r":180,"t":355},"movement":"t","description":"Dropwizard is an opinionated combination of several lightweight Java tools and frameworks, many of which would merit mention in their own right. The package embodies many of our favorite techniques, including an embedded HTTP server, support for RESTful endpoints, built-in operational metrics and health-checks, and straightforward deployments. Dropwizard makes it easy to do the right thing, allowing you to concentrate on the essential complexity of a problem rather than the plumbing."},
               {"tip":"Jekyll","name":"Jekyll","pc":{"r":225,"t":315},"movement":"t","description":"Jekyll represents the “microization” of frameworks in the web publishing space. While the focus is maintained on doing one thing - sites that feature blogs - as transparently as possible, it also shows the path to a more lightweight future. One example of this that we like is that it is now trivially easy to publish useful documentation for your software project."},
               {"tip":"HTML5 for offline applications","name":"HTML5 for offline applications","pc":{"r":250,"t":325},"movement":"t","description":"There is a tendency to equate the need for offline functionality with the need to build an app. Despite the slow standardization process, most HTML5 features have now been implemented across all major browsers. Its local storage capabilities, comprehensively supported across mobile and tablet browsers - makes HTML5 for offline applications a very suitable option."},
               {"tip":"F#","name":"F#","pc":{"r":290,"t":320},"movement":"c","description":"Microsoft’s F# continues to evolve, with the recent release of F# 3.0 beta. F# is excellent at concisely expressing business and domain logic. Developers trying to achieve explicit business logic within an application may opt to express their domain in F# with the majority of plumbing code in C#."},
               {"tip":"ClojureScript","name":"ClojureScript","pc":{"r":300,"t":300},"movement":"t","description":"ClojureScript illustrates just how cross-platform the core of Clojure really is: they ported the primary parts to run on JavaScript. It is missing some of the whizz-bang features of Clojure on the JVM and CLR, like software transactional memory, but has a surprisingly high fidelity with its more sophisticated cousins. One interesting option afforded by ClojureScript is the ability to send data structures à la JSON using ClojureScript as the data structure. Because Clojure is a Lisp, this means that you can also send “real” code."},
               {"tip":"Lua","name":"Lua","pc":{"r":315,"t":275},"movement":"t","description":"An unlikely contender in the programming languages space, Lua has seen massive adoption across a variety of industries. It is used as a scripting platform in game development and music composition; embedded in point-of-sale appliances and network devices; and in extending NoSQL databases with safe execution semantics. We expect further growth in time to come."},
               {"tip":"RubyMotion","name":"RubyMotion","pc":{"r":325,"t":355},"movement":"t","description":"Introducing a Ruby compiler and toolchain for developing iOS mobile applications, RubyMotion has unsurprisingly caused quite a stir in the ThoughtWorks development community. There continues to be a need to understand the underlying iOS APIs and some Objective-C when building applications, but there are clear benefits for those who find working with the Ruby language and tools more comfortable."},
               {"tip":"Gremlin","name":"Gremlin","pc":{"r":300,"t":285},"movement":"t","description":"Gremlin is an imperative graph traversal language supported by multiple graph databases. Its concise constructs can be used in place of the native language of the database, leading to faster development times and, in some cases, faster execution. We recommend its use as a good alternative in simple scenarios."},
               {"tip":"JavaScript as platform","name":"JavaScript as a platform","pc":{"r":290,"t":340},"movement":"t","description":"JavaScript is moving outside of the browser, emerging as an important technology for cross-platform development. It is front-and-center in the approach to code reuse taken by Node.js, Meteor.js and mobile frameworks like Calatrava. Along with the recent proliferation of other languages that compile to JavaScript, this makes us wonder if we should start to consider JavaScript as a platform and not just a language."},
               {"tip":"Backbone.js","name":"Backbone.js","pc":{"r":370,"t":345},"movement":"t","description":"Backbone.js is a great example of an abstraction pushed too far. While we initially liked the ease of wire-up, in practice it suffers from the same issues as all such data-bound frameworks, from WebForms to client/server tools. We find that it blurs the framework and model too much, forcing either bad architectural decisions or elaborate framework hackery in order to preserve sanity."},
               {"tip":"Logic in stored procedures","name":"Logic in stored procedures","pc":{"r":375,"t":315},"movement":"c","description":"It is startling to us that we continue to find new systems in 2011 that implement significant business logic in stored procedures. Programming languages commonly used to implement stored procedures lack expressiveness, are difficult to test, and discourage clean modular design. You should only consider stored procedures executing within the database engine in exceptional circumstances, where there is a proven performance issue."},
               {"tip":"Google Dart","name":"Google Dart","pc":{"r":375,"t":294},"movement":"c","description":"Dart is Google’s attempt at creating a programming language to replace JavaScript due to JavaScript’s perceived flaws and inherent performance issues. Dart, in line with previous Google languages, provides Java-like syntax and semantics that are intended to be more appealing than JavaScript’s prototype-based nature. Reception within the browser-development community has been understandably cool and it remains to be seem if the language will become more widely accepted, though Chrome’s continued rise and the search for alternatives like CoffeeScript may yet shift that balance."},
               {"tip":"Component-based frameworks","name":"Component-based frameworks","pc":{"r":385,"t":330},"movement":"t","description":"As the industry shifted from desktop GUI development to the web, it seemed natural to port the most successful patterns and designs to the new paradigm. After 15 years of trying, we feel that there are still no component-based frameworks that have successfully achieved this. We recommend not attempting to make web development into something that it fundamentally is not. It is time to accept the page and request-based nature of the web, and focus on the frameworks that support - rather than work against - these concepts."}],
    "radar_quadrants" : [
                         {"tip":"","name":"Techniques", "start":0, "end":27},
                         {"tip":"","name":"Tools", "start":27, "end":58},
                         {"tip":"","name":"Platforms", "start":58, "end":84},
                         {"tip":"","name":"Languages and Frameworks", "start":84, "end":107}
                         ],
    "radar_arcs" : [{"r":150,"tip":"","tip":"","name":"Adopt"},{"r":275,"tip":"","tip":"","name":"Trial"},{"r":350,"tip":"","tip":"","name":"Assess"},{"r":400,"tip":"","tip":"","name":"Hold"}],
    "radar_title" : "ThoughtWorks Technology Radar (October 2012)"
}